{"version":3,"sources":["images/kod.png","elements/Header.js","BrCountry.js","Countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","Logo","width","height","alt","BrCountry","useState","data","setData","useEffect","axios","get","then","res","table","scope","map","est","key","state","cases","Countries","contr","reports","Object","keys","forEach","item","cassie","Country","TotalCases","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,iC,+ICiB5BC,EAbA,WACX,OACI,yBAAKC,UAAU,gCACX,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAC9B,2BACI,yBAAKC,IAAKC,IAAMC,MAAM,KAAKC,OAAO,KAAKL,UAAU,gCAAgCM,IAAI,SADzF,mC,yBCkCCC,EArCC,WAAO,IAAD,EAEEC,mBAAS,IAFX,mBAEfC,EAFe,KAETC,EAFS,KAWpB,OARFC,qBAAU,WACRC,IACGC,IAPE,oDAQFC,MAAK,SAAAC,GACJL,EAAQK,EAAIN,KAAKA,KAAK,GAAGO,SACzB,OAIF,yBAAKhB,UAAU,mBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,wBAAIiB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGJ,+BAEIR,EAAKS,KAAI,SAAAC,GACP,OACE,wBAAIC,IAAKD,EAAIE,OACX,4BAAKF,EAAIE,OACT,4BAAKF,EAAIG,eCiBZC,EA1CC,WAAO,IAAD,EAEEf,mBAAS,IAFX,mBAEfC,EAFe,KAETC,EAFS,KAgBpB,OAbFC,qBAAU,WACRC,IACGC,IAPE,2CAQFC,MAAK,SAAAC,GACJ,IAAMS,EAAQT,EAAIN,KAAKgB,QAAQ,GAAGT,MAAM,GACxCU,OACGC,KAAKH,GACLI,SAAQ,SAACC,GACRnB,EAAQc,QAEZ,OAIF,yBAAKxB,UAAU,mBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,wBAAIiB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGJ,+BAEIR,EAAKS,KAAI,SAAAY,GACP,OACE,wBAAIV,IAAKU,EAAOC,SACd,4BAAI,kBAAC,IAAD,CAAM9B,GAAE,qBAAgB6B,EAAOC,UAAYD,EAAOC,UACtD,4BAAKD,EAAOE,oBClBjBC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,KAAK,cAAcE,UAAW7B,OCD3B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f52dfc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kod.2138f062.png\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Logo from '../images/kod.png'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                <p>\r\n                    <img src={Logo} width=\"40\" height=\"40\" className=\"d-inline-block align-top mr-2\" alt=\"Logo\" />\r\n                    Come to the Little KÃ³viD.\r\n                </p>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst url = `https://covid19api.io/api/v1/BrazilCasesByRegion`\r\n\r\nconst BrCountry = () => {\r\n  \r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    axios\r\n      .get(url)\r\n      .then(res => {\r\n        setData(res.data.data[0].table)\r\n      },[])\r\n  })\r\n\r\n    return(\r\n      <div className=\"container-fluid\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">State</th>\r\n              <th scope=\"col\">Cases</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              data.map(est => {\r\n                return(\r\n                  <tr key={est.state}>\r\n                    <td>{est.state}</td>\r\n                    <td>{est.cases}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default BrCountry","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nconst url = `https://covid19api.io/api/v1/AllReports`\r\n\r\nconst Countries = () => {\r\n  \r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    axios\r\n      .get(url)\r\n      .then(res => {\r\n        const contr = res.data.reports[0].table[0]      \r\n        Object\r\n          .keys(contr)\r\n          .forEach((item) => {\r\n            setData(contr)\r\n          })   \r\n      },[])\r\n  })\r\n\r\n    return(\r\n      <div className=\"container-fluid\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">State</th>\r\n              <th scope=\"col\">Cases</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              data.map(cassie => {\r\n                return(\r\n                  <tr key={cassie.Country}>\r\n                    <td><Link to={`/countries/${cassie.Country}`}>{cassie.Country}</Link></td>\r\n                    <td>{cassie.TotalCases}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Countries","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from './elements/Header'\nimport BrCountry from './BrCountry'\nimport Countries from './Countries'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n          <Header />\n          <Route path='/' exact component={Countries} />\n          <Route path='/countries/' component={BrCountry} />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()\n"],"sourceRoot":""}